IIIF Conversion and Image API End-point
=======================================

This docker image provides a RESTful image service that contains both an API for image transcoding as well
as a full IIIF v3 Image API end-point.

Image transcoding can be performed using a HTTP "PUT" method request. Images are transcoded to tiled multi-resolution
pyramid TIFF using the encoding parameters supplied as URL query parameters or the default parameters if no user-specified
encoding parameters have been set. Once transcoded, a JSON response will be sent which includes information on the transcoding
time, transcoded image size, compression used etc

The optimized tiled pyramid TIFF images are then available through an instance of iipsrv, the IIPImage server through GET (or
POST) requests using standard IIIF v3 syntax. Note that the image name that should be provided is that of the original source image
provided during transcoding.

The transcoded TIFF images can be deleted using a HTTP "DELETE" request. Note that this does not delete the original source image, but
only the transcoded TIFF created by a HTTP "PUT" transcode command.

Source images can be stored within a folder shared between the host and the Docker instance or remotely within an instance of S3. In this 
case, the necessary S3 credentials should be provided (see Startup Parameters section below). Note that the transcoded tiled 
multi-resolution pyramid TIFFs are stored locally and not in S3.


Building the Docker Image
-------------------------

To build the Docker image:

% docker image build -t iiif:edge ./


Authentication
--------------

Transcoding and deletion can be secured through the use of authentication tokens, which can be specified during docker image start-up.
To use such authentication, the token must be added as a HTTP header through the standard "Authorization: Bearer: <token>" header.
For example, for a token "ABCDEFGH": "Authorization: Bearer ABCDEFGH". See "Startup Parameters" section for information on how to specify
these.


Startup Parameters
------------------

A directory containing the source images needs to be supplied to the Docker container if not using S3. In addition, a directory for the 
transcoded TIFF images can optionally be provided. If no output directory is given, TIFF images are created and stored internally to the 
docker image. In this case, the TIFF images exist during the duration of the docker image. Thus, deletion of the docker container will 
delete the transcoded TIFF images too.

A number of optional encoding-related parameters can also be set at start-up:

COMPRESSION: The default compression type to be used for transcoded TIFFs (jpeg,webp,deflate,zstd,none). Default: webp
TILESIZE: The default tile size in pixels. Default 256
QUALITY: The default quality or compression level (0-100 for JPEG and WebP, 1-9 or deflate, 1-23 for zstd). Default: 50
TOKEN (optional): Authentication token necessary for image transcoding or delete operations

For use with images held within an instance of S3, several additional parameters must be specified:
S3_HOST: S3 host
S3_ID: S3 access key ID
S3_SECRET: S3 access key secret / password
S3_BUCKET: S3 bucket containing source images


Starting the Docker Image
-------------------------

A minimal startup command requires port 80 from the docker image image to be exported to a port on the host machine and
the location of the source images to be specified. This location should be specified using the docker `--mount` parameter
with `src` set to the host machine path and `dst` always set to the path used internally within the docker image: `/images/`.
For example, to make the docker image available on host port 8080 with images found in /home/user/images/ mounted as read-only:

% docker run -it -p 8080:80  --mount type=bind,src=/home/user/images/,dst=/images/,ro --rm iiif:edge

If your images are hosted on an instance of S3, this external mount point can be omitted or, if you wish to have access to it from the host machine, it must be mounted as writable: ",rw"

If you wish to save the transcoded TIFFs to a directory visible from the host machine, add a mount point to the internal
docker directory `/home/tiff/`

% docker run -it -p 8080:80  --mount type=bind,src=/home/user/images/,dst=/images/,ro --mount type=bind,src=/home/eros/tiff/,dst=/home/tiff/ --rm iiif:edge

Startup parameters can be specified using the docker `-e` parameter. For example to specify an authentication token, add for example:
"-e TOKEN=ABCEDFG". Similarly to specify the compression type, use "-e COMPRESSION=jpeg" for JPEG compression.


Examples
--------

To transcode an image "image.jpg":

% curl -X "PUT" --header "Authorization: Bearer ABCDEFGH" http://localhost/image.jpg

To transcode an image "image.png", but using deflate compression and a compression level of 9:

% curl -X "PUT" --header "Authorization: Bearer ABCDEFGH" http://localhost/image.png?compression=deflate&quality=9"

To download "image.tif" rendered with a width of 500px in WebP format using the IIIF v3 image API:

% curl http://localhost/image.jpg/full/500,/0/default.webp

To delete the transcoded TIFF corresponding to the image "image.jpg":

% curl -X "DELETE" --header "Authorization: Bearer ABCDEFGH" http://localhost/image.jpg

To transcode a list of images provided in a JSON array:

% curl -X "PUT" --header "Authorization: Bearer ABCDEFGH" -H 'Content-Type: application/json' --data '["image1.jpg","image2.jpg"]' http://localhost/

To delete a list of images provided in a JSON array:

% curl -X "DELETE" --header "Authorization: Bearer ABCDEFGH" -H 'Content-Type: application/json' --data '["image1.jpg","image2.jpg"]' http://localhost/
